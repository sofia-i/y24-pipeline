global proc shelf_SF_Cinematic () {
    global string $gBuffStr;
    global string $gBuffStr0;
    global string $gBuffStr1;


    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Studio Library" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Studio Library" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "Studio Library" 
        -overlayLabelColor 2.624876 0.801436 0.012446 
        -overlayLabelBackColor 0.227129 0.227129 0.227129 0.5 
        -image "createContainer.png" 
        -image1 "createContainer.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "from pipe.studiolibrary import run; run();" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Rig Ninja" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Rig Ninja" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "Rig Ninja" 
        -overlayLabelColor 2.624876 0.801436 0.012446 
        -overlayLabelBackColor 0.227129 0.227129 0.227129 0.5 
        -image "createContainer.png" 
        -image1 "createContainer.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "from pipe.reference import rig; rig('NinjaCINEMATIC_Rig')" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Rig Kitsune" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Rig Kitsune" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "Rig Kitsune" 
        -overlayLabelColor 2.624876 0.801436 0.012446 
        -overlayLabelBackColor 0.227129 0.227129 0.227129 0.5 
        -image "createContainer.png" 
        -image1 "createContainer.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "from pipe.reference import rig; rig('KitsuneCINEMATIC_Rig')" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "'''\nINSTRUCTIONS:\nSelect all controls you want to add as space switches\nThe last control is the one that the space switches will be added on to\nRun the script and attributes will be created for space switches between those controls!\n\nAdapted from Truong Cg Artist\n'''\n\nimport maya.cmds as cmds\n\n# find current namespace\ndef checkNamespace(con):\n    if \":\" in con:\n        nameSpace = con.rpartition(':')[0]+\":\"\n        conRawName = con.rpartition(':')[2]\n        return [nameSpace,conRawName]\n    else:\n        return \"\"\n\nselItems = cmds.ls(sl=1)\nif not selItems or len(selItems)<2:\n    raise Exception(\"must select at least 2 items\")\n\ndef checkLocked(item):\n    channels=[\".translateX\", \".translateY\", \".translateZ\", \".rotateX\", \".rotateY\", \".rotateZ\"]\n    for channel in channels:\n        if not cmds.getAttr(item+channel, settable=1):\n            # item is locked\n            return True\n    return False\n\nmainCon = selItems[-1]\nmainConExtraGrp = cmds.listRelatives(mainCon, parent=1)[0]\n\nif checkLocked(mainConExtraGrp):\n    # offset group can be done by using Comet tool: Comet > Joints/Hierarchy > zeroOut\n    raise Exception(\"The \"+mainConExtraGrp+\" group is locked. Please unlocked it first (in the original rig) or create a new offset group. Offset groups can be done by using Comet tool: Comet > Joints/Hierarchy > zeroOut\")\n\nfor item in selItems:\n    if item == mainCon:\n        pass\n    else:\n        namespace = checkNamespace(item)\n        if namespace:\n            itemRaw = namespace[1]\n        else:\n            itemRaw = item\n        # if matching attribute name, use the existing attribute\n        if not cmds.attributeQuery(itemRaw.replace('_CTRL','')+\"_Space\", n=mainCon, exists=1):\n            cmds.addAttr(mainCon, ln=itemRaw.replace('_CTRL','')+\"_Space\", at=\"bool\")\n            cmds.setAttr(mainCon+\".\"+itemRaw.replace('_CTRL','')+\"_Space\", e=1, keyable=1)\n            cmds.setAttr(mainCon+\".\"+itemRaw.replace('_CTRL','')+\"_Space\", 0)\n        # find if there is existing parent constraint\n        existConsts = cmds.listRelatives(mainConExtraGrp, children=1, type=\"parentConstraint\")\n        # if there is an existing parent constraint, check if the constraint is already done or not\n        if existConsts and itemRaw in cmds.parentConstraint(existConsts[0], q=True, tl=True):\n            const = existConsts[0]\n        else:\n            const=cmds.parentConstraint(item, mainConExtraGrp, maintainOffset=1, weight=0)[0]\n\n        # cannot query the constraint target name, so I have to do it this way (inbox me if you have a better way)\n        constTargetList=cmds.parentConstraint(const, weightAliasList=1, q=1)\n        for constTarget in constTargetList:\n            if constTarget.startswith(itemRaw):\n                constTargetName = constTarget\n                break\n\n        if not cmds.listConnections(const+\".\"+constTargetName,d=0):\n            cmds.connectAttr(mainCon+\".\"+itemRaw.replace('_CTRL','')+\"_Space\", const+\".\"+constTargetName)\n" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "'''\nINSTRUCTIONS:\nSelect all controls you want to add as space s..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "spaceSwitch" 
        -overlayLabelColor 0 0 0 
        -overlayLabelBackColor 1 1 1 0.5 
        -image "closeGeom.png" 
        -image1 "closeGeom.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "'''\nINSTRUCTIONS:\nSelect all controls you want to add as space switches\nThe last control is the one that the space switches will be added on to\nRun the script and attributes will be created for space switches between those controls!\n\nAdapted from Truong Cg Artist\n'''\n\nimport maya.cmds as cmds\n\n# find current namespace\ndef checkNamespace(con):\n    if \":\" in con:\n        nameSpace = con.rpartition(':')[0]+\":\"\n        conRawName = con.rpartition(':')[2]\n        return [nameSpace,conRawName]\n    else:\n        return \"\"\n\nselItems = cmds.ls(sl=1)\nif not selItems or len(selItems)<2:\n    raise Exception(\"must select at least 2 items\")\n\ndef checkLocked(item):\n    channels=[\".translateX\", \".translateY\", \".translateZ\", \".rotateX\", \".rotateY\", \".rotateZ\"]\n    for channel in channels:\n        if not cmds.getAttr(item+channel, settable=1):\n            # item is locked\n            return True\n    return False\n\nmainCon = selItems[-1]\nmainConExtraGrp = cmds.listRelatives(mainCon, parent=1)[0]\n\nif checkLocked(mainConExtraGrp):\n    # offset group can be done by using Comet tool: Comet > Joints/Hierarchy > zeroOut\n    raise Exception(\"The \"+mainConExtraGrp+\" group is locked. Please unlocked it first (in the original rig) or create a new offset group. Offset groups can be done by using Comet tool: Comet > Joints/Hierarchy > zeroOut\")\n\nfor item in selItems:\n    if item == mainCon:\n        pass\n    else:\n        namespace = checkNamespace(item)\n        if namespace:\n            itemRaw = namespace[1]\n        else:\n            itemRaw = item\n        # if matching attribute name, use the existing attribute\n        if not cmds.attributeQuery(itemRaw.replace('_CTRL','')+\"_Space\", n=mainCon, exists=1):\n            cmds.addAttr(mainCon, ln=itemRaw.replace('_CTRL','')+\"_Space\", at=\"bool\")\n            cmds.setAttr(mainCon+\".\"+itemRaw.replace('_CTRL','')+\"_Space\", e=1, keyable=1)\n            cmds.setAttr(mainCon+\".\"+itemRaw.replace('_CTRL','')+\"_Space\", 0)\n        # find if there is existing parent constraint\n        existConsts = cmds.listRelatives(mainConExtraGrp, children=1, type=\"parentConstraint\")\n        # if there is an existing parent constraint, check if the constraint is already done or not\n        if existConsts and itemRaw in cmds.parentConstraint(existConsts[0], q=True, tl=True):\n            const = existConsts[0]\n        else:\n            const=cmds.parentConstraint(item, mainConExtraGrp, maintainOffset=1, weight=0)[0]\n\n        # cannot query the constraint target name, so I have to do it this way (inbox me if you have a better way)\n        constTargetList=cmds.parentConstraint(const, weightAliasList=1, q=1)\n        for constTarget in constTargetList:\n            if constTarget.startswith(itemRaw):\n                constTargetName = constTarget\n                break\n\n        if not cmds.listConnections(const+\".\"+constTargetName,d=0):\n            cmds.connectAttr(mainCon+\".\"+itemRaw.replace('_CTRL','')+\"_Space\", const+\".\"+constTargetName)\n" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "SoftModTool" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "SoftModTool" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "SoftModTool" 
        -overlayLabelColor 2.624876 0.801436 0.012446 
        -overlayLabelBackColor 0.227129 0.227129 0.227129 0.5 
        -image "createContainer.png" 
        -image1 "createContainer.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "from pipe.cinematic.softModTool_02 import ui; ui()" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "ShotSculptTool" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "ShotSculptTool" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "ShotSculptTool" 
        -overlayLabelColor 2.624876 0.801436 0.012446 
        -overlayLabelBackColor 0.227129 0.227129 0.227129 0.5 
        -image "createContainer.png" 
        -image1 "createContainer.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "from pipe.cinematic.shotSculptTool_02 import run; run()" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Instructions: This is exports a playblast..." 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Playblast Exporter" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "Playblast Exporter" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "playblast.png" 
        -image1 "playblast.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "from pipe.cinematic.playblastExporter import PlayblastExporter\nexp = PlayblastExporter('anim')\nexp.run()" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "'''\nINSTRUCTIONS:\nExports Animation USD... Duh..." 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Anim USD Exporter" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "Anim USD Exporter" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "exportCache.png" 
        -image1 "exportCache.png" 
        -style "iconOnly" 
        -marginWidth 0
        -marginHeight 1
        -command "from pipe.cinematic.exporter import Exporter\n\nexp = Exporter()\n\nexp.run()" 
        -sourceType "python" 
        -commandRepeatable 1
        -flat 1
    ;

} 
